<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">
<!--    1.context:component-scan
            exclude anno controller
        2.context:property-placeholder 写location
        3.dataSource DriverManagerDataSource 在springframework中
        4.SqlSessionFactoryBean 在mybatis中
            configuration
            dataSource
            typeAlisesPackage
        5.DataSourceTransactionManager z
        6.MapperScannerConfig... 在mybatis中-->
<!--    controller交给springmvc来扫描，防止重复扫描，这里exclude-->
    <context:component-scan base-package="com.wzy.j2eelabs.lab5">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
<!--    配置数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--配置事务管理器。Spring框架采用声明式事务，通过AOP的方式将事务增加到业务中-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--
        AOP
        开启事务的注解驱动
        将使用注解@Transactional标识的方法或类中所有的方法进行事务管理
    -->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

    <!--配置SqlSessionFactoryBean，可以直接在Spring的IOC中获取SqlSessionFactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--设置MyBatis的核心配置文件的路径-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--设置数据源-->
        <property name="dataSource" ref="dataSource"></property>
        <!--设置类型别名所对应的包-->
        <property name="typeAliasesPackage" value="com.wzy.j2eelabs.lab5.pojo"></property>
        <!--设置映射文件的路径，只有映射文件xml的包和mapper接口的包不一致时需要设置
            我们都放在mapper中,不用设置-->
<!--    <property name="mapperLocations" value="classpath:com/wzy/j2eelabs/lab5/mapper/*.xml"></property>-->
    </bean>

<!--    配置mapper接口的扫描,用来将指定basePackage下的所有mapper接口,
        用上面配置的SqlSessionFactory创建的SqlSession来创建mapper的代理实现类对象,
        将这些对象也交给IOC容器管理-->
<!--    另外,这个也顺带指定了xml映射文件的路径,因为我们把接口和xml都放在mapper中,
        所以我们不需要额外指定映射文件的路径,与上面bean中写的相呼应-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.wzy.j2eelabs.lab5.mapper"></property>
    </bean>

</beans>